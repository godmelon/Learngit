<option>表示必选参数 [option]表示可选参数

一：使用流程
初始化git仓库 --> git init


添加一个文件到git仓库分两步：
1）添加文件 --> git add <filename>  如：git add readme.txt
2）提交至仓库 --> git commit -m "添加或修改的说明"  此处务必要添加”-m“参数，表示多次此commit的说明
每次可以add多个文件，一次性提交


修改git上已存在的文件：
文件修改完成后
1）可以查看当前仓库状态 --> git status [filename]
2）如有文件被modified，可以使用 --> git diff [filename] 查看文件具体的修改点
3）之后依次执行 git add 和git commit命令即可提交本次修改（仅仅执行commit是无法提交的）


删除仓库上的文件：


显示操作日志log：
可以使用 --> git log 或者添加参数 "--pretty=online" （简略显示）
如下所示：
$ git log
commit 9f9240a814bf59244e2d747e4c631892aeb3d93e
Author: melonW <1973919240@qq.com>
Date:   Fri Oct 27 10:07:21 2017 +0800

    modified readme2 add 'yeah'

commit 19eafdc9592ed7d7944a976233e58b7aeca77923
Author: melonW <1973919240@qq.com>
Date:   Fri Oct 27 10:02:29 2017 +0800

    add readme2

commit ea5b67cbe2022eedb739474f03e9c591e9dc0693
Author: melonW <1973919240@qq.com>
Date:   Thu Oct 26 17:52:54 2017 +0800

    del record.txt

或者简略显示：
$ git log --pretty=oneline
9f9240a814bf59244e2d747e4c631892aeb3d93e modified readme2 add 'yeah'
19eafdc9592ed7d7944a976233e58b7aeca77923 add readme2
ea5b67cbe2022eedb739474f03e9c591e9dc0693 del record.txt
039dbaa964b6e75feec8ce7d61fb9b4839d0d69d add record.txt
a89a12f664159b4397cd548dd9e858ae831f242e rm record.txt
3157aa06708be9934c75b274a1db77427af3f0d5 add yeah in readme.txt
3e9ac21d419e32fdce0af3b7f1939ee92ae62ddc add a new file
4c606ffd7fb9b7ce1132ea1c5f377d3f24b578f0 append GPL
97281d9a400b7fcd8cf991a564f4d08d50bcf0e9 add distributed
1d2029d484e9116df140db3a6d8b78ce84e18359 wrote a readme file

对于日志显示的补充：
Q：为什么每条记录都需要使用如此长的随机数字作为ID？
A：这是SHA1计算出来的一个非常大的数字，用十六进制表示。为什么commit id需要用这么一大串数字表示呢？
   因为Git是分布式的版本控制系统，后面我们还要研究多人在同一个版本库里工作，如果大家都用1，2，3……作为版本号，那肯定就冲突了。
   
   
版本回退：
基础命令 --> git reset --hard [commit id | HEAD^]
显示对当前仓库执行过的所有命令，不会随着bash窗口关闭而清除 --> git reflog [filename]
commit id 不必写全，只需要写前几位即可，" HEAD "参数表示回退至当前版本，" HEAD^ "表示回退至上一版本，以此类推，或者
使用数字表示，即回退至前100个版本，是" HAED~100 "

使用"git log"或者"git reflog"确定了需要回退的版本号之后，就可可执行回退操作

关于回退原理的解释：
其实就是" HEAD "这个指针，指向版本号，回退之所以快速，就是指针的移动操作

HEAD --> commit ID1
            |
		 commit ID2
			|
		 commit ID3
			.
			.
			.


关于工作区（Working Directory）和暂存区（stage）
工作区：就是在电脑里能看到的目录。
版本库（Repository）：工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。
Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，
还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。
git add 和 git commit就可以理解为以下两个过程：

  __工作区___         ______版本库________________________
 |			 |       |                                    | 
 | readme.txt|       |     _______             ________   |
 |			 |git add|   _| stage \_  HEAD-> _| master \_ |
 |			 |------>|  |           |       |            ||
 |	LICENSE	 |       |  |           |       |            ||
 |			 |       |  | readme.txt|       |            ||
 |			 |       |  |           |       |            ||    
 |			 |       |  | LICENSE   |       |            ||           
 |           |       |  |           |       |            ||
 |           |       |  |___________|       |____________||
 |___________|       |____________________________________|
 
  __工作区___         _______版本库__________________________
 |			 |       |                                       | 
 | readme.txt|       |     _______                ________   |
 |			 |       |   _| stage \_     HEAD-> _| master \_ |
 |			 |       |  |           |          |            ||
 |	LICENSE	 |       |  |           |          |            ||
 |			 |       |  |           |git commit| readme.txt ||
 |			 |       |  |           |--------->|            ||    
 |			 |       |  |           |          | LICENSE    ||           
 |           |       |  |           |          |            ||
 |           |       |  |___________|          |____________||
 |___________|       |_______________________________________|


撤销修改：
当我们修改完成后，没有进行add操作，使用" git status "，可以发现如下内容：
$ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        modified:   readme.txt

no changes added to commit (use "git add" and/or "git commit -a")

此处有提示显示:
(use "git checkout -- <file>..." to discard changes in working directory)
也就是说使用 --> git checkout -- <file>
此命令能discard本次的修改（此处丢弃的是工作区的修改内容），回退到没有修改之前的状态

同理，如果在add之后，又修改了工作区文件的内容，还是可以使用以上的命令来回退，不过此时是回退到stage
内存储的内容（即最近一次add到stage区的内容）

但是如果已经add了，并且没有再次在工作区修改，就无法使用checkout命令了，如下：

$ git add readme.txt

$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

        modified:   readme.txt
		
此时根据提示，需要先将文件从stage区恢复出到工作区，如下：

$ git reset HEAD readme.txt
Unstaged changes after reset:
M       readme.txt

此时status就变回没有add时的状态

$ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        modified:   readme.txt

no changes added to commit (use "git add" and/or "git commit -a")

再进行checkout即可


删除操作：
一般情况下，使用" rm <filename> "进行删除操作后，再使用git status查看状态，如下显示：
$ rm LICENSE.txt

$ git status
On branch master
Changes not staged for commit:
  (use "git add/rm <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        deleted:    LICENSE.txt

no changes added to commit (use "git add" and/or "git commit -a")

之后使用 --> git rm <filename> 删除stage中缓存文件，之后 --> git commit来进行提交，至此，完成删除操作
或者直接使用 " git rm <filename> + git commit "也同样能完成删除操作，效果同上
（git rm操作在实现删除stage内容同时，也完成了rm file的操作，即删除工作区内容）

如果仅仅是删除了工作区的文件，仓库里的文件并没有被删除，则可以使用 " git checkout -- <filename> "来进行恢复，如下
$ git checkout -- LICENSE.txt

但是如果已经执行了git rm操作，就无法使用checkout恢复，只能使用 " git reset "来回退版本

注意：执行完" rm file "操作之后，也需要执行" git rm "操作，是必需的，否则无法成功commit


将本地仓库和git服务器关联，本例之中使用和github关联：
第一步：
要关联一个远程库，使用命令 --> git remote add origin git@server-name:path/repo-name.git
如下：
$ git remote add origin git@github.com:godmelon/Learngit.git
（连接上github服务器，且在github上面创建的用户名是" godmelon ",主仓库为" Learngit "）

第二步：
关联后，使用命令 --> git push -u origin master 第一次推送master分支的所有内容；
如下：
$ git push -u origin master
The authenticity of host 'github.com (192.30.255.113)' can't be established.
RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.
Are you sure you want to continue connecting (yes/no)?
此处发现" can't be established. "只需要输入" yes "即可，之后便可成功将本地仓库push到github上
此后，每次本地提交后，只要有必要，就可以使用命令 --> git push origin master 推送最新修改；


分支的创建、合并与删除操作：
具体的分支的意义可在“IT教程 for git”中理解，以下只列举出常用的命令：

1) 创建分支：git branch <branch_name>

2) 切换分支：git checkout <branch_name>

3) 创建+切换分支：git checkout -b <branch_name>

4) 合并branch_name分支到当前分支：git merge <branch_name>

5) 删除分支：git branch -d <branch_name>

在合并分支的时候，有可能会出现冲突的情况，即两个分支上都在修改，且都进行了提交操作，就需要解决这个冲突。
当出现冲突的时候，会有如下显示：
$ git merge feature1
Auto-merging readme.txt
CONFLICT (content): Merge conflict in readme.txt
Automatic merge failed; fix conflicts and then commit the result.

当前实在master分支下，要将feature1分支中修改的内容合并到master中，但是master分支内也修改了同一文件，因此就会出现以上的提示：
" CONFLICT (content): Merge conflict in readme.txt "
此时打开readme.txt就会发现，文件中包含冲突的内容，类似以下内容：
Git is a distributed version control system.
Git is free software distributed under the GPL.
Git has a mutable index called stage.
Git tracks changes of files.
<<<<<<< HEAD
Creating a new branch is quick & simple.
=======
Creating a new branch is quick AND simple.
>>>>>>> feature1

HEAD是指的当前分支master的内容"Creating a new branch is quick & simple."
"Creating a new branch is quick AND simple."是feature1分支的内容。

此时就需要修改此文件，将需要的内容保留下来，其余删除，之后在按着" add + commit "过程来提交即可


关于git的两种合并方式的理解：1）快进合并（Fast-forward） 2）非快进合并（No-Fast-forward）
1）快进合并，本质就是master指针的移动，比如：以master为基准，创建的dev分支，如果是使用快进模式（即不添加任何参数），那么
   在master中合并dev中的修改实质上就是指的：将master直接指向dev，类似于线性的指针移动，因此速度很快
   
2）非快进合并，就是执行了commit操作，保留了原有的dev分支，创建一个新的提交点，master指向新的提交点，而不是指向dev
如下图所示：

非快速：                      HEAD              快速：       
       O ----- O ----- O ----- O <--master           O ----- O ----- O <--master(HEAD)
	                    \     /                                            
			  create dev \   /merge                  O ----- O ----- O ----- O <--dev(HEAD)
						  \ /                                      master
                           O <--dev                  merge:
						                             O ----- O ----- O ----- O <--dev\master(HEAD)
													 
													 del dev:
                                                     O ----- O ----- O ----- O <--master(HEAD)
结合上图理解两种合并方式。




